// <auto-generated />
using System;
using CyberSecLabPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CyberSecLabPlatform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523235829_AddScoreToAssignments2")]
    partial class AddScoreToAssignments2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CyberSecLabPlatform.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.AttackSimulationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentScore")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentStep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HistoryJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("AttackSimulationStates");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.AttackType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttackTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Атака, направленная на внедрение SQL-кода",
                            Difficulty = "Средний",
                            Name = "SQL Injection"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Атака, направленная на внедрение вредоносного скрипта",
                            Difficulty = "Средний",
                            Name = "Cross-Site Scripting (XSS)"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Социальная инженерия для получения конфиденциальной информации",
                            Difficulty = "Легкий",
                            Name = "Phishing"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Распределенная атака отказа в обслуживании",
                            Difficulty = "Сложный",
                            Name = "DDoS"
                        });
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DetectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttackTypeId");

                    b.ToTable("Scenarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttackTypeId = 1,
                            Complexity = "Средний",
                            Description = "Сценарий для обучения обнаружению и предотвращению SQL Injection атак",
                            Instructions = "В этом сценарии вы будете анализировать логи веб-сервера для выявления попыток SQL Injection атак. Следуйте инструкциям на каждом шаге.",
                            IsActive = true,
                            MaxScore = 100,
                            Title = "Обнаружение SQL Injection"
                        },
                        new
                        {
                            Id = 2,
                            AttackTypeId = 2,
                            Complexity = "Средний",
                            Description = "Сценарий для обучения методам защиты от Cross-Site Scripting атак",
                            Instructions = "Вам предстоит проанализировать код веб-приложения и найти уязвимости XSS. Затем вы должны предложить методы их устранения.",
                            IsActive = true,
                            MaxScore = 80,
                            Title = "Защита от XSS атак"
                        },
                        new
                        {
                            Id = 3,
                            AttackTypeId = 3,
                            Complexity = "Легкий",
                            Description = "Сценарий для обучения распознаванию фишинговых писем и сайтов",
                            Instructions = "В этом сценарии вы будете анализировать различные электронные письма и определять, являются ли они фишинговыми. Обратите внимание на характерные признаки фишинга.",
                            IsActive = true,
                            MaxScore = 60,
                            Title = "Распознавание фишинговых писем"
                        },
                        new
                        {
                            Id = 4,
                            AttackTypeId = 4,
                            Complexity = "Сложный",
                            Description = "Сценарий для обучения методам анализа и предотвращения DDoS атак",
                            Instructions = "Вы будете анализировать сетевой трафик во время DDoS атаки и разрабатывать стратегию защиты. Используйте предоставленные инструменты для анализа и фильтрации трафика.",
                            IsActive = true,
                            MaxScore = 120,
                            Title = "Анализ и предотвращение DDoS атак"
                        });
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetailedLogJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("StudentAttackAssignmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentAttackAssignmentId");

                    b.ToTable("ScenarioResults");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFinal")
                        .HasColumnType("boolean");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.Property<int>("ScoreIfFail")
                        .HasColumnType("integer");

                    b.Property<int>("ScoreIfSuccess")
                        .HasColumnType("integer");

                    b.Property<string>("StepText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioSteps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsFinal = false,
                            ScenarioId = 1,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 10,
                            StepText = "Проанализируйте логи веб-сервера и определите, содержат ли они признаки SQL Injection атаки."
                        },
                        new
                        {
                            Id = 2,
                            IsFinal = false,
                            ScenarioId = 1,
                            ScoreIfFail = 5,
                            ScoreIfSuccess = 15,
                            StepText = "Определите, какой тип SQL Injection был использован в атаке."
                        },
                        new
                        {
                            Id = 3,
                            IsFinal = true,
                            ScenarioId = 1,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 20,
                            StepText = "Предложите метод защиты от обнаруженной уязвимости."
                        },
                        new
                        {
                            Id = 4,
                            IsFinal = false,
                            ScenarioId = 2,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 10,
                            StepText = "Найдите в коде веб-приложения места, уязвимые для XSS атак."
                        },
                        new
                        {
                            Id = 5,
                            IsFinal = false,
                            ScenarioId = 2,
                            ScoreIfFail = 5,
                            ScoreIfSuccess = 15,
                            StepText = "Определите тип XSS уязвимости (Stored, Reflected, DOM-based)."
                        },
                        new
                        {
                            Id = 6,
                            IsFinal = true,
                            ScenarioId = 2,
                            ScoreIfFail = 5,
                            ScoreIfSuccess = 20,
                            StepText = "Исправьте найденные уязвимости, используя правильные методы защиты."
                        },
                        new
                        {
                            Id = 7,
                            IsFinal = false,
                            ScenarioId = 3,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 10,
                            StepText = "Проанализируйте предоставленное электронное письмо и определите, является ли оно фишинговым."
                        },
                        new
                        {
                            Id = 8,
                            IsFinal = false,
                            ScenarioId = 3,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 15,
                            StepText = "Определите, какие признаки указывают на то, что письмо является фишинговым."
                        },
                        new
                        {
                            Id = 9,
                            IsFinal = true,
                            ScenarioId = 3,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 15,
                            StepText = "Предложите рекомендации для пользователей по защите от фишинговых атак."
                        },
                        new
                        {
                            Id = 10,
                            IsFinal = false,
                            ScenarioId = 4,
                            ScoreIfFail = 0,
                            ScoreIfSuccess = 15,
                            StepText = "Проанализируйте сетевой трафик и определите признаки DDoS атаки."
                        },
                        new
                        {
                            Id = 11,
                            IsFinal = false,
                            ScenarioId = 4,
                            ScoreIfFail = 5,
                            ScoreIfSuccess = 20,
                            StepText = "Определите тип DDoS атаки (SYN flood, HTTP flood, Amplification и т.д.)."
                        },
                        new
                        {
                            Id = 12,
                            IsFinal = true,
                            ScenarioId = 4,
                            ScoreIfFail = 5,
                            ScoreIfSuccess = 25,
                            StepText = "Разработайте стратегию защиты от обнаруженной DDoS атаки."
                        });
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioStepOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("integer");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScenarioStepId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NextStepId");

                    b.HasIndex("ScenarioStepId");

                    b.ToTable("ScenarioStepOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            OptionText = "Да, логи содержат признаки SQL Injection атаки",
                            ScenarioStepId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            OptionText = "Нет, логи не содержат признаков SQL Injection атаки",
                            ScenarioStepId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = true,
                            OptionText = "Union-based SQL Injection",
                            ScenarioStepId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            OptionText = "Error-based SQL Injection",
                            ScenarioStepId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            OptionText = "Blind SQL Injection",
                            ScenarioStepId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = true,
                            OptionText = "Использовать параметризованные запросы",
                            ScenarioStepId = 3
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            OptionText = "Отключить доступ к базе данных",
                            ScenarioStepId = 3
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            OptionText = "Использовать простую фильтрацию символов",
                            ScenarioStepId = 3
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = true,
                            OptionText = "В форме комментариев, где пользовательский ввод отображается без обработки",
                            ScenarioStepId = 4
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            OptionText = "В системе аутентификации",
                            ScenarioStepId = 4
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = true,
                            OptionText = "Stored XSS",
                            ScenarioStepId = 5
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            OptionText = "Reflected XSS",
                            ScenarioStepId = 5
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = false,
                            OptionText = "DOM-based XSS",
                            ScenarioStepId = 5
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = true,
                            OptionText = "Использовать HTML-экранирование и Content Security Policy",
                            ScenarioStepId = 6
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            OptionText = "Отключить JavaScript в браузере",
                            ScenarioStepId = 6
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            OptionText = "Запретить пользователям оставлять комментарии",
                            ScenarioStepId = 6
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = true,
                            OptionText = "Да, это фишинговое письмо",
                            ScenarioStepId = 7
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            OptionText = "Нет, это легитимное письмо",
                            ScenarioStepId = 7
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = true,
                            OptionText = "Поддельный адрес отправителя и подозрительные ссылки",
                            ScenarioStepId = 8
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = false,
                            OptionText = "Наличие логотипа компании",
                            ScenarioStepId = 8
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = true,
                            OptionText = "Проверять URL перед переходом по ссылкам и не вводить личные данные на подозрительных сайтах",
                            ScenarioStepId = 9
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            OptionText = "Никогда не открывать электронные письма",
                            ScenarioStepId = 9
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = true,
                            OptionText = "Аномально высокий объем трафика с множества IP-адресов",
                            ScenarioStepId = 10
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            OptionText = "Нормальный объем трафика с обычным распределением",
                            ScenarioStepId = 10
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = true,
                            OptionText = "SYN flood атака",
                            ScenarioStepId = 11
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            OptionText = "DNS amplification атака",
                            ScenarioStepId = 11
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = false,
                            OptionText = "HTTP flood атака",
                            ScenarioStepId = 11
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = true,
                            OptionText = "Использовать фильтрацию трафика и CDN с защитой от DDoS",
                            ScenarioStepId = 12
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = false,
                            OptionText = "Отключить сервер до окончания атаки",
                            ScenarioStepId = 12
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            OptionText = "Увеличить количество серверов без дополнительной защиты",
                            ScenarioStepId = 12
                        });
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.StudentAttackAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAttackAssignments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.AttackSimulationState", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.Scenario", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.AttackType", "AttackType")
                        .WithMany()
                        .HasForeignKey("AttackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackType");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioResult", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.StudentAttackAssignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("StudentAttackAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioStep", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.Scenario", "Scenario")
                        .WithMany("Steps")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioStepOption", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.ScenarioStep", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CyberSecLabPlatform.Models.ScenarioStep", "ScenarioStep")
                        .WithMany("Options")
                        .HasForeignKey("ScenarioStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextStep");

                    b.Navigation("ScenarioStep");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.StudentAttackAssignment", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberSecLabPlatform.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberSecLabPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CyberSecLabPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.Scenario", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("CyberSecLabPlatform.Models.ScenarioStep", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
